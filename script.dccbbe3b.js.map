{"version":3,"sources":["src/script.js"],"names":["window","addEventListener","document","getElementById","handleForm","event","preventDefault","querySelector","predict","a","s","f","parseFloat","value","h","w_0","sex_value","activity_value","n","isNaN","k","w_t","textColor","c","table_data","weightTime","time","weight","j","t","Math","exp","round","Number","EPSILON","obj","push","prev_t","prev_w_t","diff_w_t","diff_w_t_round","diff_w_0","diff_w_0_round","sign","table","DOMParser","parseFromString","output","innerHTML","appendChild","documentElement","width","min","innerWidth","height","max","svg","d3","select","append","attr","lastEl","length","xScale","scaleLinear","domain","range","yScale","g","style","text","call","axisBottom","axisLeft","selectAll","data","enter","d","line","x","y","curve","curveMonotoneX","datum","anchor","createElement","setAttribute","click","hiddenText","querySelectorAll","m","display"],"mappings":"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","file":"script.dccbbe3b.js","sourceRoot":"..","sourcesContent":["window.addEventListener('load', function () {\n    // Prevent the page from reloading when form is submitted\n    var form = document.getElementById(\"form\");\n    function handleForm(event) {\n      event.preventDefault();\n    }\n    form.addEventListener(\"submit\", handleForm);\n    // Call the predict function when button is clicked\n    document.querySelector(\"#predict-btn\").addEventListener(\"click\", predict);\n\n    function predict() {\n      // Get various values entered by user\n      let a = parseFloat(document.querySelector(\"#age\").value);\n      let h = parseFloat(document.querySelector(\"#height\").value);\n      let w_0 = parseFloat(document.querySelector(\"#weight\").value);\n      let s, f;\n      let sex_value = document.querySelector(\"input[name=sex]:checked\").value;\n      let activity_value = document.querySelector(\"#activity\").value;\n      let n = parseFloat(document.querySelector(\"#diet\").value);\n\n      if (isNaN(n) || isNaN(h) || isNaN(w_0) || isNaN(a) || sex_value === \"\") {\n          return;\n      }\n\n      // Set value based on sex\n      if (sex_value === \"female\") {\n        s = -161;\n      } else {\n        s = 5;\n      }\n\n      // Set activity value based on selected activity\n      switch (activity_value) {\n        case \"sedentary\":\n          f = 1.2;\n          break;\n        case \"light-exercise\":\n          f = 1.3;\n          break;\n        case \"moderate-exercise\":\n          f = 1.5;\n          break;\n        case \"heavy-exercise\":\n          f = 1.7;\n          break;\n        case \"v-heavy-exercise\":\n          f = 1.9;\n          break;\n        default:\n          f = 1.2;\n          break;\n      }\n\n      // Calculate the integration constant\n      let k = (n - f * (6.25 * h - 5 * a + s)) / (10 * f);\n      let c = w_0 - k;\n\n      let table_start = `\n            <table>\n              <tr>\n              <th>Month</th>\n              <th>Weight (kg)</th>\n              <th>Monthly change (kg)</th>\n              <th>Total change (kg)</th>\n              </tr>`;\n      let table_end = `</table>`;\n      let table_data = \"\";\n      let w_t;\n      // dataset to be used for line chart\n      let weightTime = [{time: 0, weight: w_0}];\n\n      let textColor;\n      // Calculate the monthly weight\n      \n      for (let j = 1; j < 101; j++) {\n        // Using the assumption that one month is 30 days\n        let t = j * 30;\n        w_t = c * Math.exp((f * t) / -770) + k;\n        // Rounding to 2 decimal places\n        w_t = Math.round((w_t + Number.EPSILON) * 100) / 100;\n\n        // Create and insert object\n        let obj = {\n          time: j,\n          weight: w_t,\n        };\n        // Populate the line chart dataset\n        weightTime.push(obj);\n        \n        let prev_t = (j - 1) * 30;\n        let prev_w_t = c * Math.exp((f * prev_t) / -770) + k;\n        let diff_w_t = w_t - prev_w_t;\n        let diff_w_t_round =\n          Math.round((diff_w_t + Number.EPSILON) * 100) / 100;\n        let diff_w_0 = w_t - w_0;\n        let diff_w_0_round =\n          Math.round((diff_w_0 + Number.EPSILON) * 100) / 100;\n\n        let sign;\n        /* If the weight change is less than starting weight,\n        give text a class corresponding to red color . Otherwise,\n        green text*/\n        /* Put plus sign in front of positive values */\n\n        if (diff_w_t < 0) {\n          textColor = \"red\";\n          sign = \"\";\n        }else {\n          textColor = \"green\";\n          sign = \"+\";\n        }\n\n        table_data += `\n            <tr>\n            <td> ${j}</td>\n            <td>${w_t}</td>\n            <td class=\"${textColor}\">${sign}${diff_w_t_round}</td>\n            <td class=\"${textColor}\">${sign}${diff_w_0_round}</td>\n            </tr>`;\n      }\n\n      let table = table_start + table_data + table_end;\n      table = new DOMParser().parseFromString(table, \"text/xml\");\n      const output = document.getElementById(\"table\");\n      if (output.innerHTML) {\n        // Prevent multiple tables from being added\n        // Force every added table to replace previous table\n        output.innerHTML = \"\";\n        output.appendChild(table.documentElement);\n      } else {\n        output.appendChild(table.documentElement);\n      }\n      // Workaround to fix table layout bug\n      table = output.innerHTML;\n      output.innerHTML = table;\n\n      /* Creating the bar chart */\n      // set the dimensions of the graph\n        width = Math.min(800, window.innerWidth/1.1)\n        height = Math.max(width, 600);\n\n      // append the svg object to the body of the page\n      document.getElementById(\"line-chart\").innerHTML = \"\";\n      var svg = d3\n        .select(\"#line-chart\")\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n\n        let lastEl = weightTime[weightTime.length -1]\n\n        // Calculate the axis values\n        var xScale = d3.scaleLinear().domain([0, lastEl.time + 1]).range([0, width/1.2]),\n            yScale = d3.scaleLinear().domain([Math.min(w_0-5, lastEl.weight-5), Math.max(w_0+2, lastEl.weight+2)]).range([height/1.2, 0]);\n            \n        var g = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + 50 + \",\" + 50 + \")\");\n\n        \n        // X-axis label\n        svg.append('text')\n        .attr('x', width/2.2)\n        .attr('y', height/1.05+10)\n        .attr('text-anchor', 'middle')\n        .style('font-family', 'Helvetica')\n        .style('font-size', 10)\n        .style('font-weight', 'bold')\n        .text('Time in months');\n        \n        // Y-axis label\n        svg.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'translate(20,' + height/2 + ')rotate(-90)')\n        .style('font-family', 'Helvetica')\n        .style('font-size', 10)\n        .style('font-weight', 'bold')\n        .text('Weight in kilograms');\n\n\n        // X-axis scale\n        g.append(\"g\")\n         .attr(\"transform\", \"translate(0,\" + height/1.2 + \")\")\n         .call(d3.axisBottom(xScale));\n        \n        g.append(\"g\")\n         .call(d3.axisLeft(yScale));\n        \n         // Dots\n        svg.append('g')\n        .selectAll(\"dot\")\n        .data(weightTime)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (d) { return xScale(d.time); } )\n        .attr(\"cy\", function (d) { return yScale(d.weight); } )\n        .attr(\"r\", 3)\n        .attr(\"transform\", \"translate(\" + 50 + \",\" + 50 + \")\")\n        .style(\"fill\", textColor);\n\n        // Line        \n        var line = d3.line()\n        .x(function(d) { return xScale(d.time); }) \n        .y(function(d) { return yScale(d.weight); }) \n        .curve(d3.curveMonotoneX)\n        \n        svg.append(\"path\")\n        .datum(weightTime) \n        .attr(\"class\", \"line\") \n        .attr(\"transform\", \"translate(\" + 50 + \",\" + 50 + \")\")\n        .attr(\"d\", line)\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", textColor)\n        .style(\"stroke-width\", \"2\");\n\n    // Automatically scroll to the output area after it is output generated\n    let anchor = document.createElement('a');\n    anchor.setAttribute(\"href\", \"#output\");\n    anchor.click();\n\n    // Show hidden text in output area\n    let hiddenText = document.querySelectorAll('.output-text')\n    for (let m=0; m<hiddenText.length; m++){\n        hiddenText[m].style.display = \"block\";\n    }\n    }\n  })\n    \n    "]}